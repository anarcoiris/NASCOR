DELAY 2000
GUI r
DELAY 300
STRING powershell -NoProfile -WindowStyle Hidden -Command "New-Item -Path C:\temp -ItemType Directory -Force; Set-Content -Path C:\temp\install-wsl-docker.ps1 -Value '# install-wsl-docker.ps1
Start-Transcript -Path `"$env:TEMP\install-wsl-docker.log`" -Append

# InstalaciÃ³n WSL en segundo plano
$wslJob = Start-Job -ScriptBlock { wsl --install; Start-Sleep -Seconds 30; wsl --update }

# Instalar Docker Desktop
$dockerInstaller = `"$env:TEMP\DockerDesktopInstaller.exe`"
if (-not (Test-Path $dockerInstaller)) {
    Invoke-WebRequest -Uri `\"https://desktop.docker.com/win/stable/Docker%20Desktop%20Installer.exe`\" -OutFile $dockerInstaller
}

$dockerPath = `\"C:\Program Files\Docker\Docker\Docker Desktop.exe`"
if (-not (Test-Path $dockerPath)) {
    Start-Process -FilePath $dockerInstaller -ArgumentList 'install','--quiet' -Wait
}

# Esperar a que WSL termine
Wait-Job $wslJob; Receive-Job $wslJob; Remove-Job $wslJob

# Verificar estado WSL
$wslDistros = wsl -l -v 2>$null
$wslOk = $wslDistros -match 'Ubuntu'

# Verificar Docker
$dockerOk = Test-Path $dockerPath

if ($wslOk -and $dockerOk) {
    Unregister-ScheduledTask -TaskName 'InstallWSLAndDocker' -Confirm:$false
} else {
    Stop-Transcript
    exit 1
}

# Crear script de arranque Docker
$projectPath = 'C:\ruta\a\tu\proyecto'
$launchScriptPath = `"$env:ProgramData\start-docker-container.ps1`"
$launchScriptContent = @\"
Start-Process -FilePath 'C:\Program Files\Docker\Docker\Docker Desktop.exe'
\$timeout=180;\$elapsed=0;
while(\$true) {
    try { docker info > \$null 2>&1; if(\$LASTEXITCODE -eq 0) { break } }
    catch {}
    Start-Sleep -Seconds 5
    \$elapsed+=5
    if(\$elapsed -ge \$timeout) { exit 1 }
}
cd '$projectPath'
docker compose up -d
\"@
Set-Content -Path $launchScriptPath -Value $launchScriptContent -Encoding UTF8

# Crear tarea programada
$action = New-ScheduledTaskAction -Execute 'powershell.exe' -Argument '-WindowStyle Hidden -ExecutionPolicy Bypass -File `"$launchScriptPath`"'
$trigger = New-ScheduledTaskTrigger -AtStartup
$principal = New-ScheduledTaskPrincipal -UserId 'SYSTEM' -RunLevel Highest
Register-ScheduledTask -TaskName 'StartDockerAndContainer' -Action $action -Trigger $trigger -Principal $principal

Stop-Transcript
"
ENTER
